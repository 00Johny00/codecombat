mixin longLevelName(data)
  if data
    div.level-name
      span= data.courseName + ': '
      span(data-i18n='play_level.level')
      span.spl= data.levelNumber
  else
    div.level-name(data-i18n='teacher.not_applicable')

mixin inlineUserList(users)
  if users
    ul.inline-student-list.small
      each student in users
        li
          span.inline-student-name
            = student.broadName()

mixin addStudentsButton
  .add-students
    a.add-students-btn.btn.btn-lg.btn-primary(data-classroom-id=view.classroom.id)
      span(data-i18n='teacher.add_students_manually')
    if view.shouldShowGoogleClassroomButton()
      a.sync-google-classroom-btn.btn.btn-lg.btn-primary(data-classroom-id=view.classroom.id)
        span(data-i18n='teacher.sync_google_classroom')

mixin studentsTab
  #students-tab
    if !state.get('readOnly')
      div(dir=['he', 'ar', 'fa', 'ur'].indexOf(me.get('preferredLanguage', true)) == -1 ? 'ltr' : 'rtl')
        +bulkAssignControls
    else
      br
    table.students-table
      thead
        if !state.get('readOnly')
          th.checkbox-col.select-all.small.text-center
            span(data-i18n="teacher.select_all")
            .checkbox-flat
              - var allStudentsChecked = _.all(state.get('checkboxStates'))
              input(type='checkbox', id='checkbox-all-students', checked=allStudentsChecked)
              label.checkmark(for='checkbox-all-students')
        th
          +sortButtons
      tbody
        each student in state.get('students').models
          +studentRow(student)

mixin sortButtons
  .sort-buttons.small.rtl-allowed
    span(data-i18n='teacher.sort_by')
    span.spr :
    button.sort-button.sort-by-name(data-i18n='general.name', value='name')
    button.sort-button.sort-by-progress(data-i18n='teacher.progress', value='progress')

mixin studentRow(student)
  tr.student-row.alternating-background
    if !state.get('readOnly')
      td.checkbox-col.student-checkbox
        .checkbox-flat
          input(type='checkbox' id='checkbox-student-' + student.id, data-student-id=student.id, checked=state.get('checkboxStates')[student.id])
          label.checkmark(for='checkbox-student-' + student.id)
    td.student-info-col
      .student-info
        if student.get('deleted')
          em (deleted)
        - var url = '/teachers/classes/' + view.classroom.id + '/' + student.id;
        if state.get('renderOnlyContent')
          - url = '/school-administrator/teacher/' + view.classroom.get('ownerID') + '/classroom/' + view.classroom.id + '/' + student.id
        a(href=url)
          div.student-name= student.broadName()
        div.student-email.small-details= student.get('email') || student.get('name')
    td.hidden
      a.edit-student-button(data-student-id=student.id)
        span.glyphicon.glyphicon-edit
        span(data-i18n='teacher.edit')
    td.latest-level-col.small
      div
        i
          span(data-i18n='teacher.latest_completed')
      if view.allStatsLoaded()
        div
          +longLevelName(student.latestCompleteLevel)
      else
        div(data-i18n='common.loading')
    td
      if state.get('progressData')
        - var courses = view.sortedCourses.map(function(c) { return view.courses.get(c._id); });
        - var courseLabelsArray = view.helper.courseLabelsArray(courses);
        each trimCourse, index in view.sortedCourses
          - var course = view.courses.get(trimCourse._id);
          - var instance = view.courseInstances.findWhere({ courseID: course.id, classroomID: classroom.id })
          if instance && instance.hasMember(student)
            - var progress = state.get('progressData').get({ classroom: view.classroom, course: course, user: student })
            - var levelsTotal = _.reject(_.reject(trimCourse.levels, 'practice'), 'assessment').length
            - var label = courseLabelsArray[index];
            +studentCourseProgressDot(progress, levelsTotal, label, student, course, instance)
    if !state.get('readOnly')
      td
        .pull-right
          a.edit-student-link.small.center-block.text-center.m-r-2(data-student-id=student.id)
            div.glyphicon.glyphicon-edit
            div(data-i18n='teacher.edit')
          a.remove-student-link.small.center-block.text-center.m-r-2(data-student-id=student.id)
            div.glyphicon.glyphicon-remove
            div(data-i18n='teacher.remove')

//- Students tab progress dots
mixin studentCourseProgressDot(progress, levelsTotal, label, student, course, courseInstance)
  //- TODO: Refactor with TeacherClassesView jade
  //- TODO: Give classes abbreviations instead of using index?
  - dotClass = progress.completed ? 'green' : (progress.started ? 'blue' : '');
  - _.assign(progress, { levelsTotal: levelsTotal })
  if progress.completed
    a(target='_blank', href='/certificates/' + student.id + '?class=' + view.classroom.id + '&course=' + course.id + '&course-instance=' + courseInstance.id)
      .progress-dot.has-tooltip(class=dotClass, data-html='true', data-title=view.singleStudentCourseProgressDotTemplate(progress))
        +progressDotLabel(label)
  else
    .progress-dot.has-tooltip(class=dotClass, data-html='true', data-title=view.singleStudentCourseProgressDotTemplate(progress))
      +progressDotLabel(label)

mixin courseProgressTab
  #course-progress-tab.m-t-3
    if view.courses
      .text-center
        span(data-i18n='teacher.select_course')
        span.spr :
        select.course-select
          each course in view.latestReleasedCourses
            option(value=course.id selected=(course===state.get('selectedCourse')))
              = i18n(course.attributes, 'name')
              if !view.availableCourseMap[course.id]
                = " " + translate('teacher.paren_new')

    h4.m-b-2.m-t-3(data-i18n="teacher.progress_color_key")
    #progress-color-key-row.row.m-b-3
      .col.col-md-2.col-xs-4
        .progress-dot.green
        .key-text
          span(data-i18n="common.complete")
        .clearfix
      .col.col-md-2.col-xs-4
        .progress-dot.blue
        .key-text
          span(data-i18n="teacher.in_progress")
        .clearfix
      .col.col-md-2.col-xs-4
        .progress-dot
        .key-text
          span(data-i18n="teacher.not_started")
        .clearfix
      .col.col-md-2.col-xs-4.flag-label.has-tooltip(data-title=view.reviewNeededTooltipHtml())
        .progress-dot.flag
        .key-text
          span(data-i18n="teacher.review_needed")
          span.glyphicon.glyphicon-question-sign.spr
        .clearfix
    - var course = state.get('selectedCourse');
    - var courseInstance = state.get('selectedCourseInstance');
    // TODO: Refactor this to use Vue components like in the assessments tab
    if course && view.availableCourseMap[course.id] && courseInstance && courseInstance.get('members').length > 0
      .render-on-course-sync
        +courseOverview(course)
        .student-levels-table
          +sortButtons
          each student in state.get('students').models
            if _.contains(state.get('selectedCourse').members, student.id)
              +studentLevelsRow(student)
    else
      br
      h2.text-center
        i(data-i18n='teacher.no_student_assigned')
    .unassigned-students.render-on-course-sync
      if state.get('selectedCourse') && state.get('selectedCourse').members.length < state.get('students').length
        h2
          - var courseName = i18n(state.get('selectedCourse').attributes, 'name');
          span= translate('teacher.students_not_assigned').replace('{{courseName}}', courseName)
        for student in state.get('students').models
          unless _.contains(state.get('selectedCourse').members, student.id)
            .row.unassigned-student-row.alternating-background
              .student-name.col-sm-3
                = student.broadName()
              .student-email.small-details.col-sm-3
                = student.get('email') || student.get('name')
              .col-sm-4
                .latest-completed.truncate.small
                  i.m-r-1
                    span(data-i18n='teacher.latest_completed')
                  +longLevelName(student.latestCompleteLevel)
              if !state.get('readOnly')
                .col-sm-2
                  .assign-student-button.btn.btn-md.btn-navy.pull-right(data-user-id=student.id data-course-id=state.get('selectedCourse').id)
                    span(data-i18n='teacher.assign_course')

//- Course overview section in unit progress tab
mixin courseOverview(course)
  - var capstoneLevel = (view.courseModuleLevelsMap[course.id] || {}).capstone
  .course-overview-row
    .course-title.container
      .row
        .course-name.row-title.col-sm-6
          span= i18n(course.attributes, 'name')
          span= ' | '
          span(data-i18n='teacher.course_overview')
        .col-sm-2.capstone-project-container
          if capstoneLevel && state.get('progressData')
            - var capstoneProgress = state.get('progressData').get({ classroom: view.classroom, course: course, level: capstoneLevel })
            +viewCapstoneProjectButton(capstoneLevel, capstoneProgress)
    .course-overview-progress
      +courseProgressRow(course)

//- Each student section in unit progress tab
mixin studentLevelsRow(student)
  - var course = state.get('selectedCourse')
  - var capstoneLevel = (view.courseModuleLevelsMap[course.id] || {}).capstone
  .student-levels-row.alternating-background
    .row
      .student-info.col-sm-6
        span.student-name.row-title= student.broadName()
        span= ' '
        span.student-email.small-details= student.get('email') || student.get('name')
      .col-sm-2.capstone-project-container
        if capstoneLevel && state.get('progressData')
          - var capstoneProgress = state.get('progressData').get({ classroom: view.classroom, course: course, level: capstoneLevel, user: student })
          +viewCapstoneProjectButton(capstoneLevel, capstoneProgress, true)
    .row
      div.student-levels-progress.col.col-xs-12
        +courseProgressRow(course, student)

//- Module-wise progress dots in course overview and student section in unit progress tab
mixin courseProgressRow(course, student)
  - var courseModuleLevelsMap = (view.courseModuleLevelsMap[course.id] || {}).modules || {}
  if state.get('progressData')
    for levels, moduleNum in courseModuleLevelsMap
      .module-container.hide-fade-left
        .module-container-label
          span(data-i18n='teacher.module'+moduleNum)
          span=view.moduleNameMap[course.id][moduleNum]
        .scroll-arrow-left.hide
          span.glyphicon.glyphicon-chevron-left
        .scroll-arrow-right
          span.glyphicon.glyphicon-chevron-right
        .module-content
          each level, index in levels
            - var progress = state.get('progressData').get({ classroom: view.classroom, course: course, level: level, user: student })
            - var contentType = level.getDisplayContentType()
            //- Special flow for 1FH, done in mixin capstoneFlow below
            - if (contentType == 'intro' && course.is1FHCourse()) break
            +studentsLevelProgressDot(progress, level, contentType, student)
          if course.is1FHCourse()
            +capstoneFlow(levels, course, student)

//- Special capstone flow for 1FH with capstone header label over all intro levels
mixin capstoneFlow(levels, course, student)
  - var startCapstoneFlow = false
  .capstone-flow
    each level, index in levels
      - var contentType = level.getDisplayContentType()
      - if (contentType != 'intro' && !startCapstoneFlow) continue
      - startCapstoneFlow = true
      - var progress = state.get('progressData').get({ classroom: view.classroom, course: course, level: level, user: student})
      +studentsLevelProgressDot(progress, level, contentType, student, 'special-capstone-intro-flow')
    .capstone-label
      - var capstoneLevel = (view.courseModuleLevelsMap[course.id] || {}).capstone
      span=view.getLevelDisplayNameWithLabel(capstoneLevel)

//- Unit progress tab progress dots
mixin studentsLevelProgressDot(progress, level, contentType, student, specialClass)
  - dotClass = progress.completed ? 'green' : (progress.started ? 'blue' : '')
  - labelText = i18n(level.attributes, 'displayName') || i18n(level.attributes, 'name')
  - var context = _.merge(progress, {label: view.getLevelDisplayNameWithLabel(level), type: contentType, moment: moment, numStudents: view.students.length})
  - var link = null
  - var courseId = state.get('selectedCourse').id
  
  if contentType == 'capstone' || contentType == 'practice' || contentType == 'challenge'
    - context.showSessionData = true
    if dotClass && student 
      - link = '/teachers/classes/' + view.classroom.id + '/' + student.id + '#' + level.get('slug')
      - context.showStudentCodeLink = true


  //- Group intro content progress dots
  if contentType == 'intro'
    .progress-dot.course-tab.intro-level-progress-dot
      - content = level.get('introContent') || {}
      each c, index in content
        - if (c.type == 'avatarSelectionScreen') continue
        - context.type = c.type
        - context.label = view.getIntroContentNameWithLabel(c)
        - context.learningGoal = c.learningGoals
        - labelText = c.displayName
        if c.type == 'interactive'
          - var interactiveProgress = {}
          - var classLanguage = (view.classroom.get('aceConfig') || {}).language || 'python'
          - var interactiveId = (c.contentId || {})[classLanguage] || c.contentId
          - context.showSessionData = true
          if dotClass
            - link = `/play/intro/${level.get('slug')}?course=${courseId}&codeLanguage=${classLanguage}&intro-content=${index}`
          if state.get('interactiveProgressData')
            - interactiveProgress = state.get('interactiveProgressData').get({classroom: view.classroom, interactiveId: interactiveId}) || {}
            if student
              - context.session = (interactiveProgress[student.id] || {}).session || {}
              - context.needsReview = (interactiveProgress.flaggedStudents || []).includes(student.id)
            else
              - context.needsReview = interactiveProgress.needsReview
          +levelProgressDotWithTooltip(dotClass, context, link, c.type, labelText, student, specialClass)
        else
          - context.needsReview = false
          - context.session = null
          - context.showSessionData = false
          - link = null
          +levelProgressDotWithTooltip(dotClass, context, link, c.type, labelText, student, specialClass)
      +introLevelLabel(view.getLevelDisplayNameWithLabel(level), dotClass)   
  else if link
    if state.get('readOnly')
      - link = link.replace('/teachers/classes/', '/school-administrator/teacher/' + view.classroom.get('ownerID') + '/classroom/')
    +levelProgressDotWithTooltip(dotClass, context, link, contentType, labelText, student)
  else
    +levelProgressDotWithTooltip(dotClass, context, link, contentType, labelText, student)

mixin levelProgressDotWithTooltip(dotClass, context, link, type, labelText, student, specialClass)
  - var dataTitle = view.allStudentsLevelProgressDotTemplate
  if student
    - dataTitle = view.singleStudentLevelProgressDotTemplate
  
  if link
    - var target = "_self"
    if type == "interactive"
      - target = "_blank"
    a.progress-dot.course-tab.has-tooltip(class=[dotClass, specialClass], data-html='true', data-title=dataTitle(context), href=link, target=target)
      +progressDotIcon(type, context.needsReview)
      +progressDotLabel(labelText)
  else
    .progress-dot.course-tab.has-tooltip(class=[dotClass, specialClass], data-html='true', data-title=dataTitle(context))
      +progressDotIcon(type, context.needsReview)
      +progressDotLabel(labelText)

mixin introLevelLabel(label, dotClass)
  .dot-label.text-center.intro-level-label(class=dotClass)
    .dot-label-inner.text-capitalize.intro-level-label-inner
      = label

mixin progressDotLabel(label)
  .dot-label.text-center
    .dot-label-inner.text-capitalize
      = label

mixin progressDotIcon(contentType, needsReview)
  if needsReview
    img.dot-icon(src="/images/ozaria/teachers/content-icons/"+contentType+"-review.png")
  else
    img.dot-icon(src="/images/ozaria/teachers/content-icons/"+contentType+".png")

mixin viewCapstoneProjectButton(level, progress, singleStudent)
  - levelName = i18n(level.attributes, 'displayName') || i18n(level.attributes, 'name')
  - var context = _.merge(progress, {label: view.getLevelDisplayNameWithLabel(level), type: 'capstone project', moment: moment, numStudents: view.students.length, showSessionData: true, showStudentCodeLink:false})
  if singleStudent
    if progress.session && level
      - projectLink = view.urls.playDevLevel({level: level, session: progress.session, course: state.get('selectedCourse')})
      a.view-capstone-project.has-tooltip(data-html='true', data-title=view.singleStudentLevelProgressDotTemplate(context) href=projectLink, target="_blank")
        span(data-i18n='teacher.view_capstone_project')
    else
      .view-capstone-project.has-tooltip.inactive(data-html='true', data-title=view.singleStudentLevelProgressDotTemplate(context))
        span(data-i18n='teacher.view_capstone_project')
  else
    if state.get('selectedCourseInstance')
      - projectGalleryLink = view.urls.courseProjectGallery({courseInstance: state.get('selectedCourseInstance')})
      a.view-capstone-project.has-tooltip(data-html='true', data-title=view.allStudentsLevelProgressDotTemplate(context) href=projectGalleryLink)
        span(data-i18n='teacher.view_project_gallery')

mixin copyCodes
  div.copy-button-group.form-inline.m-b-3
    .form-group
      input.text-h4.semibold#join-code-input(value=state.get('classCode'), readonly)
    button#copy-code-btn.form-control.btn.btn-lg.btn-forest
      span(data-i18n='teacher.copy_class_code')
    div.text-center.small.class-code-blurb(data-i18n='teacher.class_code_blurb')

  div.copy-button-group.form-inline.m-b-3
    .form-group
      input.text-h4.semibold#join-url-input(value=state.get('joinURL'), dir="ltr", readonly)
    button#copy-url-btn.form-control.btn.btn-lg.btn-forest
      span(data-i18n='teacher.copy_class_url')
    div.text-center.small.class-code-blurb(data-i18n='teacher.class_join_url_blurb')

mixin bulkAssignControls
  .bulk-assign-controls.form-inline
    .no-students-selected.small-details(class=state.get('errors').nobodySelected ? 'visible' : '')
      span(data-i18n='teacher.no_students_selected')
    span.small
      span(data-i18n='teacher.bulk_assign')
      span :
    select.bulk-course-select.form-control
      each course in _.rest(view.latestReleasedCourses)
        option(value=course.id selected=(course===state.get('selectedCourse')))
          = i18n(course.attributes, 'name')
          if !view.availableCourseMap[course.id]
            = " " + translate('teacher.paren_new')
    if !state.get('readOnly')
      button.btn.btn-primary.assign-to-selected-students(disabled=!view.allStatsLoaded())
        span(data-i18n='teacher.assign_course')
      button.btn.btn-burgundy-alt.remove-from-selected-students(disabled=!view.allStatsLoaded())
        span(data-i18n='teacher.remove_course')

mixin assessmentsTab
  #assessments-tab
    .text-center.m-t-3
      span(data-i18n='teacher.select_course')
      span.spr :
      select.course-select
        each course in view.latestReleasedCourses
          option(value=course.id selected=(course === state.get('selectedCourse')))
            = i18n(course.attributes, 'name')
            if !view.availableCourseMap[course.id]
              = " " + translate('teacher.paren_new')

    h4.m-b-2.m-t-3(data-i18n="teacher.progress_color_key")
    #progress-color-key-row.row.m-b-3
      .col.col-md-2.col-xs-3
        .progress-dot.forest
        .key-text
          span.small(data-i18n='teacher.success')
        .clearfix
      .col.col-md-2.col-xs-3
        .progress-dot.gold
        .key-text
          span.small(data-i18n='teacher.in_progress')
        .clearfix
      .col.col-md-2.col-xs-3
        .progress-dot
        .key-text
          span.small(data-i18n='teacher.not_started')
        .clearfix
    .assessments-table

mixin enrollmentStatusTab
  // TODO: Have search input in all tabs

  //form.form-inline.text-center.m-t-3
  //  #search-form-group.form-group
  //    label(for="student-search") Search for student:
  //    input#student-search.form-control.m-l-1(type="search")
  //    span.glyphicon.glyphicon-search.form-control-feedback

  table.table#license-status-table.table-condensed.m-t-3
    thead
      // Checkbox code works, but don't need it yet.
      //th.checkbox-col.select-all
        .checkbox-flat
          input(type='checkbox' id='checkbox-all-students')
          label.checkmark(for='checkbox-all-students')
      th
        .sort-buttons.small
          span(data-i18n='teacher.sort_by')
          span.spr :
          button.sort-button.sort-by-name(data-i18n='general.name', value='name')
          button.sort-button.sort-by-status(data-i18n='user.status', value='status')
      th
      th
      if me.canRevokeLicensesViaUI() && !state.get('readOnly')
        th
          button.revoke-all-students-button.btn.btn-burgundy-alt(data-i18n="teacher.revoke_licenses")
    tbody
      - var searchTerm = state.get('searchTerm');
      each student in state.get('students').search(searchTerm)
        - var status = student.prepaidStatus()
        tr.student-row.alternating-background
          //td.checkbox-col.student-checkbox
            .checkbox-flat
              input(type='checkbox' id='checkbox-student-' + student.id, data-student-id=student.id)
              label.checkmark(for='checkbox-student-' + student.id)
          td.student-info-col
            .student-info
              div.student-name= student.broadName()
              div.student-email.small-details= student.get('email') || student.get('name')
          td.status-col
            span(data-i18n='user.status')
            span.spr :
            strong(class= status === 'expired' ? 'text-danger' : '')= view.studentStatusString(student)
          td.enroll-col
            if status !== 'enrolled' && me.canManageLicensesViaUI() && !state.get('readOnly')
              button.enroll-student-button.btn.btn-navy(data-i18n="teacher.apply_license", data-user-id=student.id, data-event-action="Teachers Class Enrollment Enroll Student")
            else
              if student.prepaidType() === 'course'
                span(data-i18n="teacher.full_license")
              else if student.prepaidType() === 'starter_license'
                span(data-i18n="teacher.starter_license")
          if me.canRevokeLicensesViaUI() && !state.get('readOnly')
            td.revoke-col
              if status === 'enrolled' && student.prepaidType() === 'course'
                button.revoke-student-button.btn.btn-burgundy-alt(data-i18n="teacher.revoke_license", data-user-id=student.id)

- var classroom = view.classroom
if !me.isTeacher() && !me.isAdmin()
  .alert.alert-danger.text-center
    .container
      //- DNT: Temporary
      h3 ATTENTION: Please upgrade your account to a Teacher Account.
      p
        | We are transitioning to a new improved classroom management system for instructors.
        | Please convert your account to ensure you retain access to your classrooms.
      a.btn.btn-primary.btn-lg(href="/teachers/update-account") Upgrade to teacher account

if classroom.loaded
  .container(dir="auto")
    div#classes-nag-subview
    if classroom.get('archived')
      .row.center-block.text-center.m-t-3.m-b-3
        if !state.get('readOnly')
          .unarchive-btn.btn.btn-lg.btn-navy
            span(data-i18n='teacher.unarchive_this_class')

    - var today = new Date()
    - var created = classroom.created()
    - var elapsed = today.getTime()-created.getTime()

    if !state.get('readOnly') && elapsed / (1000*60*60*24) > 180
      .update-class.rtl-allowed
        .alert.alert-info.text-center.rtl-allowed
          strong(data-i18n='courses.update_old_classroom')
          .small-details.rtl-allowed
            span.spr(data-i18n='courses.update_old_classroom_detail')
            a(data-i18n="courses.teacher_dashboard" href="/teachers/")
            span.spl(data-i18n="courses.update_old_classroom_detail_2")

    h3.m-t-2(dir="auto")= classroom.get('name')
    if !state.get('readOnly')
      a.label.edit-classroom(data-classroom-id=classroom.id)
        span(data-i18n='teacher.edit_class_settings')
    h4(dir="auto")= classroom.get('description')

    .classroom-info-row.row.m-t-5.rtl-allowed
      .classroom-details.col-md-3.rtl-allowed
        - var stats = state.get('classStats')
        h4.m-b-2(data-i18n='teacher.class_overview')

        .language.small-details
          span(data-i18n='teacher.language')
          span.spr :
          span= classroom.capitalLanguage

        .student-count.small-details
          span(data-i18n='courses.students')
          span.spr :
          span= classroom.get('members').length

        .average-playtime.small-details
          span(data-i18n='teacher.avg_playtime')
          span.spr :
          if view.allStatsLoaded()
            span= stats.averagePlaytime
          else
            span(data-i18n='common.loading')

        .total-playtime.small-details
          span(data-i18n='teacher.total_playtime')
          span.spr :
          if view.allStatsLoaded()
            span= stats.totalPlaytime
          else
            span(data-i18n='common.loading')

        .average-complete.small-details
          span(data-i18n='teacher.avg_completed')
          span.spr :
          if view.allStatsLoaded()
            span= stats.averageLevelsComplete
          else
            span(data-i18n='common.loading')

        .total-complete.small-details
          span(data-i18n='teacher.total_completed')
          span.spr :
          if view.allStatsLoaded()
            span= stats.totalLevelsComplete
          else
            span(data-i18n='common.loading')

        .total-complete.small-details
          span(data-i18n='teacher.created')
          span.spr :
          span= moment(classroom.created()).format('l')

        //- .concepts.small-details
        //-   if state.get('progressData')
        //-     div
        //-       span(data-i18n='teacher.concepts_covered')
        //-       span :
        //-     - console.log('concepts', view.conceptData)
        //-     - concepts = view.conceptData
        //-     each state, name in view.conceptData[view.classroom.id]
        //-       if state.get('started')
        //-         b.concept(class=state.get('completed') ? 'forest' : 'gold')
        //-           span(data-i18n='concepts.'+name)

      .completeness-info.col-md-4
        h4.m-b-2
          | &nbsp;
        div.small-details.rtl-allowed
          if state.get('earliestIncompleteLevel')
            span(data-i18n='teacher.earliest_incomplete')
            span :
            +longLevelName(state.get('earliestIncompleteLevel'))
            +inlineUserList(state.get('earliestIncompleteLevel').users)
          else if (view.classroom.get('members') || []).length > 0 && !view.allStatsLoaded()
            span(data-i18n='teacher.earliest_incomplete')
            span :
            div(data-i18n='common.loading')

        div.small-details.m-t-3.rtl-allowed
          if state.get('latestCompleteLevel')
            span(data-i18n='teacher.latest_complete')
            span :
            +longLevelName(state.get('latestCompleteLevel'))
            +inlineUserList(state.get('latestCompleteLevel').users)
          else if (view.classroom.get('members') || []).length > 0 && !view.allStatsLoaded()
            span(data-i18n='teacher.latest_complete')
            span :
            div(data-i18n='common.loading')

      .adding-students.col-md-5
        h4.m-b-2
          span(data-i18n='courses.add_students')
          span :
        +copyCodes
        if !state.get('readOnly')
          +addStudentsButton

  if view.students.length > 0
    .container.main-container(dir="auto")
      ul.nav.nav-tabs.m-t-5(role='tablist')
        - var activeTab = state.get('activeTab');
        li(class=(activeTab === "#students-tab" ? 'active' : ''))
          a.nav-tab-btn.students-tab-btn(href='#students-tab')
            .small-details.text-center(data-i18n='courses.students')
        .tab-spacer
        li(class=(activeTab === "#course-progress-tab" ? 'active' : ''))
          a.nav-tab-btn.course-progress-tab-btn(href='#course-progress-tab')
            .small-details.text-center(data-i18n='teacher.unit_progress')
        .tab-spacer
        li(class=(activeTab === "#license-status-tab" ? 'active' : ''))
          a.nav-tab-btn.license-status-tab-btn(href='#license-status-tab')
            .small-details.text-center(data-i18n='teacher.license_status')
        .tab-filler

      .tab-content
        if activeTab === '#students-tab'
          +studentsTab
        else if activeTab === '#course-progress-tab'
          +courseProgressTab
        else if activeTab === '#license-status-tab'
          +enrollmentStatusTab

  else
    .text-center.m-t-5.m-b-5
      .text-h2
        span(data-i18n="teacher.no_students_yet")
      .text-h4
        span(data-i18n="teacher.try_refreshing")
